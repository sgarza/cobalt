{"name":"Cobalt","tagline":"Colored, Nesting, Multiple logging management.","body":"# Cobalt #\r\n\r\nCobalt is a simple logger multiplexer that works with a JSON based format.\r\nYou can instantiate it with a set of loggers or add them later\r\n(see API reference below). When logging anything, Cobalt will attempt to\r\ngenerate an Object that conforms to the Cobalt Log Format Definition\r\n(if required) and passes it to every logger it has by calling their `log`\r\nmethod.\r\n\r\nExample of instantiating a cobalt logger:\r\n\r\nIn node:\r\n```\r\nrequire('cobalt-log');\r\n```\r\n\r\nIn the browser just require the files. Then:\r\n\r\n```\r\nthis.logger = new Cobalt.Console({\r\n  from : \"Breezi Client\",\r\n  loggers : [ new Cobalt.Logger.JsConsole({\r\n              formatter : Cobalt.Formatter.Token,\r\n              formatterOpts : {\r\n                formatString : \"{{_from}}: {{message}}\",\r\n                ansiColor : true\r\n              }\r\n            })]\r\n});\r\n```\r\n\r\nThis code will create an instance with a JsConsole logger that uses the\r\nToken formatter (See loggers and formatters below).\r\n\r\nCobalt works in a browser or inside node, so feel free to use cobalt all\r\nover! (Also, see the socket logger below for info on connecting cobalt\r\nloggers)\r\n\r\n## Quick API Reference ##\r\n\r\n* **addLogger(logger)**: Adds a logger to the cobalt instance.\r\n* **removeLogger(logger)**: Removes a logger from the cobalt instance.\r\n* **buildLog(item, level=7)**: Generates a cobalt log object as if you had\r\n  logged item (it will do this automatically when you log anything)\r\n* **extendLog(object)**: Creates a dummy log object and extends it with\r\n  object.\r\n* **buildSeparator**: Generates a cobalt log object that defines a separator\r\n* **log, info, notice, warn, error**: Generates a log object with the\r\n  appropriate severity level and sends it to all loggers.\r\n* **separator()**: Generates a separator log object and sends it to all\r\n  loggers.\r\n* **space(lines)**: Logs an empty string `lines` times\r\n* **indent()**: Increases the indent level globally.\r\n* **indent(callback)**: Increases the indent level for anything logged\r\n  from inside the callback.\r\n* **outdent()/outdent(callback)**: Same as indent, but decreases indent level.\r\n* **color()**: Changes the color globally. †\r\n* **color(callback)**: Changes the color for anything logged from inside the\r\n  callback. †\r\n* **now()**: Returns the current time in microseconds, using performance.now()\r\n  or process.hrtime() if available. If not, falls back to miliseconds.\r\n\r\n† Cobalt doesn't really care about formatting or colors, but it allows you\r\nto set the `_color` property in the generated object. In the end, it's up to\r\nthe formatter to decide if it will use this property. However, this maintains\r\nthe old cobalt API and gives you flexibility in how you color your logs.\r\n\r\n\r\n## Loggers ##\r\n\r\nCobalt doesn't depend on any particular logger, and the loggers it expects\r\nto receive is any object that responds to the log method. However, since it\r\nwould pass a JSON object instead of a string, this may result in unexpected\r\nbehavior for loggers that don't expect it. To ease the use of Cobalt with\r\nexisting loggers, cobalt includes a couple of loggers that you can use out\r\nof the box.\r\n\r\n\r\n### Cobalt.Logger.JsConsole ###\r\n\r\nThis logger communicates the Javascript console present in web browsers or\r\nnode with cobalt. It uses the logLevel to trigger the appropriate method\r\n(e.g. info vs warn vs error). You can also initialize it with a formatter,\r\nto convert the log object to a string:\r\n\r\n```\r\n new Cobalt.Logger.JsConsole({\r\n     formatter : Cobalt.Formatter.Token,\r\n     formatterOpts : {\r\n         formatString : \"[{{_timestamp}}] {{message}} (@{{_from}})\"\r\n     }\r\n }) \r\n```\r\n\r\nWhat this does is: it will trigger the method `format` on `formatter`\r\npassing the `logObject` and `formatterOpts`. This means that a formatter is\r\nany object that responds to `format(logObject, formatterOpts)`. It expects\r\na string to be returned.\r\n\r\n### Cobalt.Logger.Socket ###\r\n\r\nThis logger sends the log object to a socket using Socket.IO. It does not\r\nformat the output. To catch the log from the recipient, you have to listen\r\nfor the `log` event, and from there you can pass it to another Cobalt\r\ninstance or do whatever you want with it.\r\n\r\n### More Loggers? ###\r\n\r\nYou can build your own logger easily for any method of transport you find\r\nnecessary (e.g. mail, database, twitter, etc). Any object that responds\r\nto `#log(logObject)` is a valid logger:\r\n\r\n```javascript\r\n// A valid, very minimalistic logger\r\nvar simpleLogger = {\r\n  log : function (logObject) {\r\n    console.log(logObject.message);\r\n  }\r\n}\r\n\r\nlogger.addLogger(simpleLogger);\r\n```\r\n\r\n## Formatters ##\r\n\r\nCobalt itself makes no assumptions about the output of the logger and just\r\npasses the object to every logger it has. However, it is clear that loggers\r\nmay want to manipulate this object. As shown in the JsConsole, a formatter\r\nshould respond to the format method and receive a `logObject` and an\r\n`optsObject`. However, as this is not a core part of Cobalt, this is only a\r\nrecommendation (as this is the way the included JsConsole logger does it)\r\nand it is up to the logger on how to transform the object it receives.\r\nCobalt includes a very simple formatter that works well in conjuction\r\nwith JsConsole.\r\n\r\n### Cobalt.Formatter.Token ###\r\n\r\nThe Token formatter is a very simple formatter that uses a formatString to\r\nextract values from the log object and interpolate them in a string.\r\n\r\n#### Options ####\r\n\r\n* **formatString**: A string that defines the format of the output. It is a\r\n  string with double curly braces denoting fields. For example:\r\n  `\"[{{_timestamp}}] {{message}} (@{{_from}})\"` would attempt to extract the\r\n  \\_timestamp, message and \\_from fields to create a string similar to this:\r\n  `\"[124896126491.123] Testing the logger (@Client Application)\"`\r\n  (defaults to `\"{{message}}\"`)\r\n* **ansiColor**: A boolean value, when `true` will output the string in ANSI\r\n  color depending on the severity level (defaults to `false`)\r\n\r\n### More Formatters? ###\r\n\r\nAs with loggers, cobalt itself does not worry about these things. However,\r\nif you wish to make a formatter that is exchangable with Token, you just\r\nneed to create an object that responds to the`format(logObject, optionsObject)`\r\nmethod:\r\n\r\n```javascript\r\n// A valid, very minimalistic formatter\r\nvar simpleFormatter = {\r\n  format : function (logObject, options) {\r\n    if (options.showDate) {\r\n      return \"[\" + Date(logObject._timeStamp) + \"] \" + logObject.message\r\n    } else {\r\n      return logObject.message;\r\n    }\r\n  }\r\n}\r\n\r\nlogger.addLogger(new Cobalt.Logger.JsConsole({\r\n  formatter: simpleFormatter,\r\n  formatterOpts : {\r\n    showDate : true\r\n  }\r\n}));\r\n```\r\n\r\n## The Cobalt Log Format ##\r\n\r\nThe Cobalt Log (CoLog) format is a JSON based log format used with cobalt.\r\nIt is partly inspired in Greylog's GELF format, but with very notorious\r\ndifferences. The CoLog requires a header with certain fields that allow\r\ncobalt and its pieces to handle it. All header fields are prefixed with\r\nan underscore. Other than those fields, you can put whatever you want in\r\nthe object; It's up to the loggers to make sense of the structure and\r\ndisplay it in a way that makes sense.\r\n\r\nYou can attempt to build this structure on your own, or let cobalt build it for \r\nyou. Any object you pass for logging will be converted. However, if you\r\nbuild it on your own you have two options: The first one is use buildLog\r\nto create a log object for \"item\" as if you had logged \"item\" or you can\r\nuse extendLog that will create a dummy log object and extends it with\r\nwhatever object you pass to it.\r\n\r\n### Required Fields ###\r\n\r\n* **_version** : The version of cobalt this is designed to work with\r\n* **_timestamp** : A timestamp in microseconds.\r\n* **_cobaltLog** [true] : Cobalt will check for the \\_cobaltLog to decide if\r\ntransformation will happen or not.\r\n\r\n### Optional Fields ###\r\n\r\n* **\\_from**: The sender of the log (Defaults to Generic Cobalt Logger)\r\n* **\\_level**: The level of the log (Defaults to 7)\r\n* **\\_levelString**: The string corresponding to the log level (e.g. 7 ->\r\n  DEBUG, 3 -> ERROR, 0 -> CRIT)\r\n* **\\_indentLevel**: The indent level of the log\r\n* **\\_color**: The color of the log\r\n* **\\_separator**: If true, indicates that this is a separator and holds no\r\n  valuable information.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}